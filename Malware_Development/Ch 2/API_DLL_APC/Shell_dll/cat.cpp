#include <windows.h>
#include <iostream>

// define function pointer types for DLL functions
typedef int(__cdecl *CatFunction)(LPCTSTR message);

int main(void)
{
    HINSTANCE petDll;
    CatFunction catFunction;

    std::cout << "Loading DLL with shellcode...\n";

    // step 1 Load the pet.dll library into memory
    petDll = LoadLibrary("pet.dll");

    // Check if DLL loaded successfully
    if (petDll != NULL)
    {
        std::cout << "DLL Loaded Succcessfully!\n";

        // Step 2: Get the memory address of the function we want to call
        catFunction = (CatFunction)GetProcAddress(petDll, "Cat");

        // Step 3: If we got the function address call, them
        if (catFunction != NULL)
        {
            (catFunction)("Shellcode executed!");
        }

        // step 4: Unload the DLL from memory
        std::cout << "Shellcode ran!! press enter to exit////\n";

        getchar();
        FreeLibrary(petDll);
    }
    else
    {
        std::cout << "Failed to Load DLL!!\n";
    }

    return 0;
}